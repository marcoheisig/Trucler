(cl:in-package #:trucler-test)

(defun test-function ()
  (let* ((global-environment (make-instance 'environment))
         (client (make-instance 'trucler-test-client))
         (e0 (make-instance 'trucler::environment
               :global-environment global-environment))
         (id (list nil))
	 (e1 (trucler:add-local-function client e0 'foo id))
         (e2 (trucler:add-inline client e1 'foo 'inline))
         (e3 (trucler:add-function-dynamic-extent client e1 'foo))
         (f0 (trucler:function-info client e1 'foo))
         (f1 (trucler:function-info client e2 'foo))
         (f2 (trucler:function-info client e3 'foo)))
    (assert (not (null f0)))
    (assert (eq (trucler:name f0) 'foo))
    (assert (eq (trucler:type f0) t))
    (assert (eq (trucler:identity f0) id))
    (assert (null (trucler:inline f0)))
    (assert (null (trucler:ignore f0)))
    (assert (null (trucler:dynamic-extent f0)))
    (assert (null (trucler:ast f0)))
    (assert (eq (trucler:name f1) 'foo))
    (assert (eq (trucler:type f1) t))
    (assert (eq (trucler:identity f1) id))
    (assert (null (trucler:ignore f1)))
    (assert (null (trucler:dynamic-extent f1)))
    (assert (null (trucler:ast f1)))
    (assert (eq (trucler:inline f1) 'inline))

    (assert (eq (trucler:name f2) 'foo))
    (assert (eq (trucler:type f2) t))
    (assert (eq (trucler:identity f2) id))
    (assert (null (trucler:inline f2)))
    (assert (null (trucler:ignore f2)))
    (assert (trucler:dynamic-extent f2))
    (assert (null (trucler:ast f2)))))

(defun test-block ()
  (let* ((global-environment (make-instance 'environment))
         (client (make-instance 'trucler-test-client))
         (e0 (make-instance 'trucler::environment
               :global-environment global-environment))
	 (e1 (trucler:add-block client e0 'foo))
	 (e2 (trucler:add-block client e1 'hello))
         (e3 (trucler:add-block client e2 'hello))
	 (b0 (trucler:block-info client e3 'foo))
         (b1 (trucler:block-info client e2 'hello))
         (b2 (trucler:block-info client e3 'hello)))
    (assert (not (null b0)))
    (assert (not (null b1)))
    (assert (not (null b2)))
    (assert (not (eq b1 b2)))
    (assert (eq (trucler:name b0) 'foo))
    (assert (eq (trucler:name b1) 'hello))
    (assert (eq (trucler:name b2) 'hello))))

(defun test-tag ()
  (let* ((global-environment (make-instance 'environment))
         (client (make-instance 'trucler-test-client))
         (e0 (make-instance 'trucler::environment
               :global-environment global-environment))
         (e1 (trucler:add-tag client e0 'foo))
         (e2 (trucler:add-tag client e1 'hello))
         (e3 (trucler:add-tag client e2 'hello))
         (b0 (trucler:tag-info client e3 'foo))
         (b1 (trucler:tag-info client e2 'hello))
         (b2 (trucler:tag-info client e3 'hello)))
    (assert (not (null b0)))
    (assert (not (null b1)))
    (assert (not (null b2)))
    (assert (not (eq b1 b2)))
    (assert (eq (trucler:name b0) 'foo))
    (assert (eq (trucler:name b1) 'hello))
    (assert (eq (trucler:name b2) 'hello))))

(defun test ()
  (test-function)
  (test-block)
  (test-tag))
